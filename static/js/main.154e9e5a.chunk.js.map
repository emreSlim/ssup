{"version":3,"sources":["hooks/useLocalStorage.js","functions/freeUpSpace.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Logout.js","components/MessageInput.js","components/OpenConversation.js","components/DeleteModal.js","components/Contacts.js","components/Conversations.js","functions/validateId.js","components/CustomAlert.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/Dashboard.js","components/Login.js","components/App.js","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","unshiftBlobsFromLocalStorage","filtered","conversations","map","convo","index","messages","filter","message","type","window","location","reload","setItem","stringify","Number","encodeURIComponent","length","toFixed","freeUpLocalStorageSpace","removeItem","ContactContext","createContext","useContacts","useContext","ContactProvider","children","contacts","setContacts","Provider","createContact","id","name","some","contact","alert","prev","isOnline","removeContact","item","idx","updateContacts","SocketContext","useSocket","SocketProvider","socket","setSocket","onlineUsers","setOnlineUsers","newSocket","io","query","close","on","off","ConversationsContext","useConversations","ConversationsProvider","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","body","sender","prevConversations","madeChanges","newMessage","newConversations","conversation","a","b","sort","every","elem","formattedConversations","recipient","find","fromMe","senderName","senderID","selected","selectedConversation","createConversation","removeConversation","sendMessage","emit","selectConversationIndex","Logout","deleteValue","showModal","setShowModal","closeModal","style","position","right","Button","size","className","onClick","Modal","show","onHide","Header","Body","variant","imageCompressor","ImageCompressor","MessageInput","text","setText","file","setFile","fileInput","useRef","Form","onSubmit","e","preventDefault","url","URL","createObjectURL","dataURL","Promise","resolve","img","Image","onload","height","width","src","then","toWidth","toHeight","compressorSettings","mimeType","mode","quality","run","compressedFile","r","current","Group","InputGroup","Prepend","Control","ref","onChange","inputFile","target","files","accept","click","icon","faFileImage","placeholder","as","required","resize","Append","faPaperPlane","OpenConversation","setRef","node","scrollIntoView","behavior","join","SentFrom","alt","DeleteModal","dialogue","onPressDelete","closeButton","Title","Footer","Contacts","setModalShow","deletingContactName","setDeletingContactName","deletingContactIndex","setDeletingContactIndex","ListGroup","Item","fontSize","Conversations","deletingConversation","setDeletingConversation","deletingConversationIndex","setDeletingConversationIndex","subClassName","recipientArray","status","includes","action","active","handleConversationDeletePress","validateId","input","string","toString","test","CustomAlert","heading","focusOn","focus","Alert","zIndex","Heading","NewContactModal","idRef","nameRef","showAlert","setShowAlert","trim","setTimeout","Label","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","label","contactId","prevId","CONVERSATION_KEY","CONTACTS_KEY","alignCenter","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","isConvrsationOpen","maxWidth","background","Tab","Container","onSelect","Nav","Link","eventKey","Content","Pane","Dashboard","NoConversationToAppear","Login","onIdSubmit","uuidV4","App","setId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.154e9e5a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport freeUpLocalStorageSpace from \"../functions/freeUpSpace\";\r\n\r\nexport const PREFIX = \"ssup-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  function deleteValue() {\r\n    localStorage.removeItem(prefixedKey);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      freeUpLocalStorageSpace();\r\n\r\n      localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n    }\r\n  }, [value, prefixedKey]);\r\n\r\n  return [value, setValue, deleteValue];\r\n}\r\n","export default function freeUpLocalStorageSpace() {\r\n  function getUsedLocalStorage() {\r\n    return Number(\r\n      encodeURIComponent(\r\n        JSON.stringify(localStorage.getItem(\"ssup-conversations\")).length / 1024\r\n      )\r\n    ).toFixed(0);\r\n  }\r\n\r\n  function unshiftBlobsFromLocalStorage() {\r\n    var filtered = 0;\r\n    let conversations = JSON.parse(localStorage.getItem(\"ssup-conversations\"));\r\n\r\n    if (conversations) {\r\n      conversations = conversations.map((convo, index) => {\r\n        convo.messages = convo.messages.filter((message) => {\r\n          if (!filtered && message.type !== \"text\") {\r\n            filtered++;\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n        return convo;\r\n      });\r\n      window.location.reload();\r\n    }\r\n\r\n    localStorage.setItem(\"ssup-conversations\", JSON.stringify(conversations));\r\n  }\r\n\r\n  while (getUsedLocalStorage() > 4000) {\r\n    unshiftBlobsFromLocalStorage();\r\n  }\r\n}\r\n","import React, { createContext, useContext } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nconst ContactContext = createContext();\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactContext);\r\n}\r\n\r\nexport function ContactProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\r\n\r\n  function removeContact(index) {\r\n    setContacts((prev) => {\r\n      return prev.filter((item, idx) => index !== idx);\r\n    });\r\n  }\r\n\r\n  function createContact(id, name) {\r\n    if (contacts.some((contact) => contact.id === id)) {\r\n      alert(\"Oops! entry already exists.\");\r\n      return;\r\n    }\r\n\r\n    setContacts((prev) => [...prev, { id, name, isOnline: false }]);\r\n  }\r\n\r\n  return (\r\n    <ContactContext.Provider\r\n      value={{\r\n        contacts,\r\n        createContact,\r\n        removeContact,\r\n        updateContacts: setContacts,\r\n      }}\r\n    >\r\n      {children}\r\n    </ContactContext.Provider>\r\n  );\r\n}\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst ENDPOINT = \"https://ssup-backend.herokuapp.com/\";\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState();\r\n  const { contacts } = useContacts();\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(ENDPOINT, {\r\n      query: {\r\n        id,\r\n      },\r\n    });\r\n    setSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"online-users\", setOnlineUsers);\r\n\r\n    return () => socket.off(\"online-users\");\r\n  }, [contacts, socket]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={{ socket, onlineUsers }}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useSocket } from \"./SocketProvider\";\r\n\r\nconst ConversationsContext = createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage(\r\n    \"conversations\",\r\n    []\r\n  );\r\n\r\n  const { socket } = useSocket();\r\n\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n\r\n  const { contacts } = useContacts();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prev) => {\r\n      return [...prev, { recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  function removeConversation(index) {\r\n    setConversations((prev) => {\r\n      return prev.filter((item, idx) => index !== idx);\r\n    });\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, body, type, sender }) => {\r\n      setConversationsAfterTypeVerify();\r\n\r\n      function setConversationsAfterTypeVerify() {\r\n        setConversations((prevConversations) => {\r\n          let madeChanges = false;\r\n\r\n          const newMessage = { sender, body, type };\r\n\r\n          const newConversations = prevConversations.map((conversation) => {\r\n            if (arrayEquality(conversation.recipients, recipients)) {\r\n              madeChanges = true;\r\n              return {\r\n                ...conversation,\r\n                messages: [...conversation.messages, newMessage],\r\n              };\r\n            }\r\n            return conversation;\r\n          });\r\n\r\n          if (madeChanges) {\r\n            return newConversations;\r\n          } else {\r\n            return [\r\n              ...prevConversations,\r\n              { recipients, messages: [newMessage] },\r\n            ];\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", addMessageToConversation);\r\n    return () => {\r\n      socket.off(\"receive-message\");\r\n    };\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  function sendMessage({ recipients, body, type }) {\r\n    socket.emit(\"send-message\", { recipients, body, type });\r\n\r\n    addMessageToConversation({ recipients, body, type, sender: id });\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient;\r\n      });\r\n      const name = contact && contact.name;\r\n      return { id: recipient, name };\r\n    });\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const fromMe = id === message.sender;\r\n      return {\r\n        ...message,\r\n        senderName: contact && contact.name,\r\n        senderID: message.sender,\r\n        fromMe,\r\n      };\r\n    });\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    createConversation,\r\n    removeConversation,\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((elem, index) => {\r\n    return elem === b[index];\r\n  });\r\n}\r\n","import { Button, Modal } from \"react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { BoxArrowInRight } from \"react-bootstrap-icons\";\r\n\r\nexport default function Logout() {\r\n  const deleteValue = useLocalStorage(\"id\")[2];\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  function openModal() {\r\n    setShowModal(true);\r\n  }\r\n\r\n  function logout() {\r\n    deleteValue();\r\n    closeModal();\r\n    window.location.reload();\r\n  }\r\n\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: \"fixed\", right: 0 }}>\r\n      <Button\r\n        size=\"sm\"\r\n        className=\"d-flex align-items-center\"\r\n        onClick={openModal}\r\n      >\r\n        <BoxArrowInRight className=\"mr-2\" size={30} />\r\n      </Button>\r\n      <Modal show={showModal} onHide={closeModal}>\r\n        <Modal.Header>\r\n          <h5 className=\"m-0\">You will be logged out!</h5>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Please save your ID before logging out or you may lose it.</p>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button variant=\"danger\" className=\"mx-2\" onClick={logout}>\r\n              Okay\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFileImage, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport { ImageCompressor } from \"image-compressor\";\r\n\r\nconst imageCompressor = new ImageCompressor();\r\n\r\nexport default function MessageInput() {\r\n  const [text, setText] = useState(\"\");\r\n  const [file, setFile] = useState();\r\n  const { sendMessage, selectedConversation } = useConversations();\r\n  const fileInput = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (file) {\r\n      const url = URL.createObjectURL(file);\r\n\r\n      getHeightAndWidth(url).then(({ height, width }) => {\r\n        const ratio = height / width;\r\n\r\n        const size =\r\n          ratio < 1\r\n            ? { toWidth: width > 800 ? 800 : width }\r\n            : { toHeight: height > 800 ? 800 : height };\r\n\r\n        const compressorSettings = {\r\n          ...size,\r\n\r\n          mimeType: \"image/png\",\r\n          mode: \"strict\",\r\n          quality: 0,\r\n        };\r\n\r\n        imageCompressor.run(url, compressorSettings, (compressedFile) => {\r\n          sendMessage({\r\n            recipients: selectedConversation.recipients.map((r) => r.id),\r\n            body: compressedFile,\r\n            type: file.type,\r\n          });\r\n          setFile();\r\n          fileInput.current.value = null;\r\n        });\r\n      });\r\n    } else {\r\n      sendMessage({\r\n        recipients: selectedConversation.recipients.map((r) => r.id),\r\n        body: text,\r\n        type: \"text\",\r\n      });\r\n    }\r\n    setText(\"\");\r\n\r\n    function getHeightAndWidth(dataURL) {\r\n      return new Promise((resolve) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n          resolve({ height: img.height, width: img.width });\r\n        };\r\n        img.src = dataURL;\r\n      });\r\n    }\r\n  }\r\n\r\n  function handleFileClick() {\r\n    fileInput.current.click();\r\n  }\r\n\r\n  function selectFile(e) {\r\n    let inputFile = e.target.files[0];\r\n\r\n    setText(inputFile.name);\r\n    setFile(inputFile);\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group className=\"m-1\">\r\n        <InputGroup className=\"d-flex align-items-center\">\r\n          <InputGroup.Prepend>\r\n            <div className=\"mx-2\">\r\n              <Form.Control\r\n                ref={fileInput}\r\n                onChange={selectFile}\r\n                type=\"file\"\r\n                className=\"d-none\"\r\n                accept=\".png, .jpg, .jpeg\"\r\n              />\r\n              <FontAwesomeIcon\r\n                onClick={handleFileClick}\r\n                icon={faFileImage}\r\n                size=\"2x\"\r\n              />\r\n            </div>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            placeholder=\"type your message here..\"\r\n            as=\"textarea\"\r\n            required\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            style={{\r\n              height: \"100px\",\r\n              resize: \"none\",\r\n            }}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button\r\n              variant=\"success\"\r\n              type=\"submit\"\r\n              className=\"d-flex flex-column align-items-center justify-content-center\"\r\n            >\r\n              <FontAwesomeIcon icon={faPaperPlane} size=\"2x\" />\r\n              Send\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport Zmage from \"react-zmage\";\r\n\r\nexport default function OpenConversation() {\r\n  const setRef = useCallback((node) => {\r\n    node &&\r\n      node.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      });\r\n  }, []);\r\n\r\n  const { selectedConversation } = useConversations();\r\n\r\n  function renderMessages(message, index) {\r\n    if (message.type === \"text\") {\r\n      return (\r\n        <div\r\n          ref={setRef}\r\n          key={index}\r\n          className={`d-flex flex-column ${\r\n            message.fromMe\r\n              ? \"align-self-end align-items-end\"\r\n              : \"align-items-start\"\r\n          }`}\r\n        >\r\n          <div\r\n            className={`rounded px-2 py-1 font-weight-bold ${\r\n              message.fromMe ? \"bg-primary text-white\" : \"bg-light\"\r\n            }`}\r\n          >\r\n            {message.body}\r\n          </div>\r\n          <SentFrom />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          ref={setRef}\r\n          key={index}\r\n          className={`${\r\n            message.fromMe ? \"align-self-end\" : \"align-self-start \"\r\n          }`}\r\n        >\r\n          <div\r\n            className={`${\r\n              message.fromMe ? \"bg-primary\" : \"bg-light\"\r\n            } p-1 rounded d-flex justify-content-center`}\r\n          >\r\n            <Zmage\r\n              style={{ width: 300, height: \"auto\" }}\r\n              src={message.body}\r\n              alt={`sent by ${\r\n                message.senderName\r\n                  ? message.senderName\r\n                  : message.fromMe\r\n                  ? \"you\"\r\n                  : \"unknown contact\"\r\n              }`}\r\n            />\r\n          </div>\r\n          <SentFrom />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    function SentFrom() {\r\n      return (\r\n        <div\r\n          className={`mb-2 small ${\r\n            message.senderName && \"text-capitalize\"\r\n          } px-1 ${message.fromMe ? \"align-self-end\" : \"\"}`}\r\n        >\r\n          {message.fromMe\r\n            ? \"You\"\r\n            : (message.senderName && message.senderName) || message.senderID}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex  flex-column flex-grow-1 border-left\">\r\n      <h5 className=\"text-white pl-2 bg-primary text-capitalize py-2 rounded\">\r\n        {selectedConversation.recipients\r\n          .map((recipient) => (recipient.name && recipient.name) || \"Unknown\")\r\n          .join(\", \")}\r\n      </h5>\r\n      <div className=\"flex-grow-1 overflow-auto\">\r\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n          {selectedConversation.messages.map(renderMessages)}\r\n        </div>\r\n      </div>\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\nexport default function DeleteModal({ dialogue, onPressDelete, closeModal }) {\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Confirm Delete?</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>{dialogue}</p>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button variant=\"danger\" onClick={onPressDelete}>\r\n          Delete\r\n        </Button>\r\n        <Button onClick={closeModal} variant=\"secondary\">\r\n          Cancel\r\n        </Button>\r\n      </Modal.Footer>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ListGroup, Modal } from \"react-bootstrap\";\r\nimport { PersonCircle, TrashFill } from \"react-bootstrap-icons\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport DeleteModal from \"./DeleteModal\";\r\n\r\nexport default function Contacts() {\r\n  const { contacts, removeContact } = useContacts();\r\n  const [showModal, setModalShow] = useState(false);\r\n  const [deletingContactName, setDeletingContactName] = useState();\r\n  const [deletingContactIndex, setDeletingContactIndex] = useState();\r\n\r\n  function closeModal() {\r\n    setModalShow(false);\r\n  }\r\n\r\n  function handleDeleteConfirm() {\r\n    removeContact(deletingContactIndex);\r\n    closeModal();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={showModal} onHide={closeModal}>\r\n        <DeleteModal\r\n          dialogue={`Contact entry \"${deletingContactName}\" will be removed!`}\r\n          closeModal={() => setModalShow(false)}\r\n          onPressDelete={handleDeleteConfirm}\r\n        />\r\n      </Modal>\r\n      <ListGroup variant=\"flush\">\r\n        {contacts.map((contact, index) => (\r\n          <ListGroup.Item key={contact.id} variant=\"primary\">\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n              <div className=\"d-flex align-items-center col-md-11 p-0\">\r\n                <PersonCircle />\r\n                <p className=\"m-0 p-0 ml-2 text-capitalize font-weight-bold col-md-10 text-break\">\r\n                  {contact.name}\r\n                </p>\r\n              </div>\r\n              <TrashFill\r\n                className=\"text-danger\"\r\n                onClick={() => {\r\n                  setDeletingContactName(contact.name);\r\n                  setDeletingContactIndex(index);\r\n                  setModalShow(true);\r\n                }}\r\n              />\r\n            </div>\r\n            <p\r\n              className=\"text-muted m-0 mt-1 font-weight-lighter text-center\"\r\n              style={{ fontSize: 14 }}\r\n            >\r\n              {contact.id}\r\n            </p>\r\n          </ListGroup.Item>\r\n        ))}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ListGroup, Modal } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport { People, TrashFill } from \"react-bootstrap-icons\";\r\nimport DeleteModal from \"./DeleteModal\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\n\r\nexport default function Conversations() {\r\n  const [showModal, setModalShow] = useState(false);\r\n\r\n  const [deletingConversation, setDeletingConversation] = useState();\r\n\r\n  const [deletingConversationIndex, setDeletingConversationIndex] = useState();\r\n\r\n  const {\r\n    conversations,\r\n    selectConversationIndex,\r\n    removeConversation,\r\n  } = useConversations();\r\n\r\n  const { onlineUsers } = useSocket();\r\n\r\n  function closeModal() {\r\n    setModalShow(false);\r\n  }\r\n\r\n  function handleConversationDeletePress(index, recipient) {\r\n    setDeletingConversation(recipient);\r\n    setDeletingConversationIndex(index);\r\n    setModalShow(true);\r\n  }\r\n\r\n  function handleDeleteConfirm() {\r\n    removeConversation(deletingConversationIndex);\r\n    closeModal();\r\n    selectConversationIndex(0);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={showModal} onHide={closeModal}>\r\n        <DeleteModal\r\n          dialogue={`Your conversation with \"${deletingConversation}\" will be deleted!`}\r\n          closeModal={() => setModalShow(false)}\r\n          onPressDelete={handleDeleteConfirm}\r\n        />\r\n      </Modal>\r\n      <ListGroup variant=\"flush\">\r\n        {conversations.map((conversation, index) => {\r\n          let subClassName = \"text-capitalize\";\r\n          const recipientArray = conversation.recipients\r\n            .map((r) => {\r\n              let status = \"\";\r\n              if (onlineUsers.includes(r.id)) {\r\n                status = \" (online)\";\r\n              }\r\n\r\n              if (r.name != null) {\r\n                return r.name + status;\r\n              } else {\r\n                subClassName = \"small\";\r\n                return r.id + status;\r\n              }\r\n            })\r\n            .join(\", \");\r\n          return (\r\n            <ListGroup.Item\r\n              className={\r\n                \"d-flex justify-content-between align-items-center \" +\r\n                subClassName\r\n              }\r\n              key={index}\r\n              action\r\n              variant=\"dark\"\r\n              onClick={() => {\r\n                selectConversationIndex(index);\r\n              }}\r\n              active={conversation.selected}\r\n            >\r\n              <div className=\"col-md-11 d-flex align-items-center p-0\">\r\n                <People className=\"mr-2\" />\r\n                <div className=\"col-md-10 p-0 text-break\">{recipientArray}</div>\r\n              </div>\r\n              <TrashFill\r\n                className=\"text-danger\"\r\n                onClick={() =>\r\n                  handleConversationDeletePress(index, recipientArray)\r\n                }\r\n              />\r\n            </ListGroup.Item>\r\n          );\r\n        })}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n","export default function validateId(input) {\r\n  const string = input && input.toString();\r\n\r\n  if (string && string.length > 9) {\r\n    if (string.length === 10 && !/\\D/.test(string)) {\r\n      return \"number\";\r\n    } else if (\r\n      string.length > 10 &&\r\n      /\\d/.test(string) &&\r\n      /[a-z]/.test(string)\r\n    ) {\r\n      return \"id\";\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nexport default function CustomAlert({ heading, body, show, style, focusOn }) {\r\n  if (show) {\r\n    focusOn &&\r\n      focusOn.current &&\r\n      focusOn.current.focus &&\r\n      focusOn.current.focus();\r\n    return (\r\n      <Alert\r\n        className=\"position-absolute w-100 text-center rounded\"\r\n        style={{ zIndex: 99, ...style }}\r\n        variant=\"danger\"\r\n      >\r\n        <Alert.Heading>{heading}</Alert.Heading>\r\n        <p className=\"m-0\">{body}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n  return <div />;\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport validateId from \"../functions/validateId\";\r\nimport CustomAlert from \"./CustomAlert\";\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n  const idRef = useRef();\r\n  const nameRef = useRef();\r\n  const { createContact } = useContacts();\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  function PopAlert() {\r\n    setShowAlert(true);\r\n    setTimeout(() => setShowAlert(false), 1000);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    let id = idRef.current.value.trim();\r\n\r\n    if (validateId(id)) {\r\n      createContact(id, nameRef.current.value);\r\n      closeModal();\r\n    } else {\r\n      PopAlert();\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <CustomAlert\r\n        focusOn={idRef}\r\n        heading=\"Invalid ID!\"\r\n        body=\"Please input a valid ID to create a contact.\"\r\n        show={showAlert}\r\n      />\r\n      <Modal.Header>Create Contact</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control type=\"text\" ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameRef} required />\r\n          </Form.Group>\r\n          <Button type=\"submit\">Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport CustomAlert from \"./CustomAlert\";\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\r\n  const { contacts } = useContacts();\r\n  const { createConversation } = useConversations();\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  function PopAlert() {\r\n    setShowAlert(true);\r\n    setTimeout(() => setShowAlert(false), 500);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (selectedContactIds.length) {\r\n      createConversation(selectedContactIds);\r\n      closeModal();\r\n    } else {\r\n      PopAlert();\r\n    }\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds((prev) => {\r\n      if (prev.includes(contactId)) {\r\n        return prev.filter((prevId) => {\r\n          return contactId !== prevId;\r\n        });\r\n      } else {\r\n        return [...prev, contactId];\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CustomAlert\r\n        heading=\"Oops!\"\r\n        body=\"No contacts selected!\"\r\n        show={showAlert}\r\n      />\r\n      <Modal.Header>\r\n        <h4>Create Conversation</h4>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {contacts.length < 1 ? (\r\n          <p className=\"text-center text-danger font-weight-bold\">\r\n            \"Add contact before creating new conversation!\"\r\n          </p>\r\n        ) : (\r\n          <Form onSubmit={handleSubmit}>\r\n            {contacts.map((contact) => (\r\n              <Form.Group controlId={contact.id} key={contact.id}>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  value={selectedContactIds.includes(contact.id)}\r\n                  label={contact.name}\r\n                  onChange={() => handleCheckboxChange(contact.id)}\r\n                />\r\n              </Form.Group>\r\n            ))}\r\n            <Button type=\"submit\">Create</Button>\r\n          </Form>\r\n        )}\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal, Nav, Tab } from \"react-bootstrap\";\r\nimport { ChatFill, PersonPlusFill } from \"react-bootstrap-icons\";\r\nimport Contacts from \"./Contacts\";\r\nimport Conversations from \"./Conversations\";\r\nimport NewContactModal from \"./NewContactModal\";\r\nimport NewConversationModal from \"./NewConversationModal\";\r\n\r\nconst CONVERSATION_KEY = \"conversations\";\r\nconst CONTACTS_KEY = \"contacts\";\r\n\r\nconst alignCenter = \"d-flex align-items-center justify-content-around m-0\";\r\n\r\nexport default function Sidebar({ id }) {\r\n  const [activeKey, setActiveKey] = useState(CONVERSATION_KEY);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  function closeModal() {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  const isConvrsationOpen = activeKey === CONVERSATION_KEY;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        maxWidth: \"290px\",\r\n        width: \"50vw\",\r\n        background: \"linear-gradient(#fff 10%, #ddd)\",\r\n      }}\r\n      className=\"d-flex flex-column  border-right\"\r\n    >\r\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n        <Nav variant=\"tabs\" className=\"justify-content-center\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONVERSATION_KEY}>Conversations</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        <Tab.Content className=\"overflow-auto flex-grow-1\">\r\n          <Tab.Pane eventKey={CONVERSATION_KEY}>\r\n            <Conversations />\r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey={CONTACTS_KEY}>\r\n            <Contacts />\r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n        <div className=\"p-2 border-top small\">\r\n          Your ID : <span className=\"text-muted\">{id}</span>\r\n        </div>\r\n        <Button\r\n          variant=\"dark\"\r\n          size=\"sm\"\r\n          className=\"m-2\"\r\n          onClick={() => setModalOpen(true)}\r\n        >\r\n          {isConvrsationOpen ? (\r\n            <div className={alignCenter}>\r\n              New Conversation <ChatFill />\r\n            </div>\r\n          ) : (\r\n            <div className={alignCenter}>\r\n              Add New Contact <PersonPlusFill />\r\n            </div>\r\n          )}\r\n        </Button>\r\n      </Tab.Container>\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        {isConvrsationOpen ? (\r\n          <NewConversationModal closeModal={closeModal} />\r\n        ) : (\r\n          <NewContactModal closeModal={closeModal} />\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport Logout from \"./Logout\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations();\r\n  return (\r\n    <div className=\"d-flex\" style={{ height: \"100vh\" }}>\r\n      <Sidebar id={id} />\r\n      <div\r\n        className=\"d-flex flex-grow-1\"\r\n        style={{ background: \"linear-gradient(to right, #abc, #ddd)\" }}\r\n      >\r\n        {selectedConversation ? (\r\n          <OpenConversation />\r\n        ) : (\r\n          <NoConversationToAppear />\r\n        )}\r\n      </div>\r\n      <Logout />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NoConversationToAppear() {\r\n  return (\r\n    <div className=\"d-flex flex-grow-1 justify-content-center align-items-center\">\r\n      <p className=\"text-muted\">Conversations will display here!</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport validateId from \"../functions/validateId\";\r\nimport CustomAlert from \"./CustomAlert\";\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef();\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  function PopAlert() {\r\n    setShowAlert(true);\r\n    setTimeout(() => setShowAlert(false), 1000);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let id = idRef.current.value.trim();\r\n\r\n    if (validateId(id)) {\r\n      onIdSubmit(id);\r\n    } else {\r\n      PopAlert();\r\n    }\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidV4());\r\n  }\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <CustomAlert\r\n        focusOn={idRef}\r\n        heading=\"Invalid ID!\"\r\n        body=\"Please input a valid ID to login or create a new ID.\"\r\n        show={showAlert}\r\n      />\r\n      <Container\r\n        className=\"align-items-center d-flex\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Form className=\"w-100\" onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Enter Your ID</Form.Label>\r\n            <Form.Control type=\"text\" ref={idRef} required></Form.Control>\r\n          </Form.Group>\r\n          <Button type=\"submit\" className=\"mr-2\">\r\n            Login\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={createNewId}>\r\n            Create A New Id\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ContactProvider } from \"../contexts/ContactsProvider\";\r\nimport { ConversationsProvider } from \"../contexts/ConversationsProvider\";\r\nimport { SocketProvider } from \"../contexts/SocketProvider\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Login from \"./Login\";\r\n\r\nfunction App() {\r\n  const [id, setId] = useLocalStorage(\"id\");\r\n  const dashboard = (\r\n    <ContactProvider id={id}>\r\n      <SocketProvider id={id}>\r\n        <ConversationsProvider id={id}>\r\n          <Dashboard id={id} />\r\n        </ConversationsProvider>\r\n      </SocketProvider>\r\n    </ContactProvider>\r\n  );\r\n\r\n  return id ? dashboard : <Login onIdSubmit={setId} />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}