{"version":3,"sources":["hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Logout.js","components/MessageInput.js","components/OpenConversation.js","components/DeleteModal.js","components/Contacts.js","components/Conversations.js","components/NewContactModal.js","components/CustomAlert.js","components/NewConversationModal.js","components/Sidebar.js","components/Dashboard.js","components/Login.js","components/App.js","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","removeItem","ContactContext","createContext","useContacts","useContext","ContactProvider","children","contacts","setContacts","Provider","createContact","id","name","some","contact","alert","prev","isOnline","removeContact","index","filter","item","idx","updateContacts","SocketContext","useSocket","SocketProvider","socket","setSocket","onlineUsers","setOnlineUsers","newSocket","io","query","close","on","off","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","body","type","sender","prevConversations","madeChanges","newMessage","newConversations","map","conversation","a","b","length","sort","every","elem","messages","formattedConversations","recipient","find","message","fromMe","senderName","senderID","selected","selectedConversation","createConversation","removeConversation","sendMessage","emit","selectConversationIndex","Logout","deleteValue","showModal","setShowModal","closeModal","style","position","right","Button","size","className","onClick","Modal","show","onHide","Header","Body","variant","window","location","reload","MessageInput","text","setText","file","setFile","fileInput","useRef","Form","onSubmit","e","preventDefault","console","log","reader","FileReader","readAsDataURL","addEventListener","r","result","Group","InputGroup","Prepend","Control","ref","onChange","inputFile","target","files","accept","current","click","icon","faFileImage","placeholder","as","required","height","resize","Append","faPaperPlane","OpenConversation","setRef","node","scrollIntoView","smooth","join","lastMessage","SentFrom","width","src","alt","DeleteModal","dialogue","onPressDelete","closeButton","Title","Footer","Contacts","setModalShow","deletingContactName","setDeletingContactName","deletingContactIndex","setDeletingContactIndex","ListGroup","Item","fontSize","Conversations","deletingConversation","setDeletingConversation","deletingConversationIndex","setDeletingConversationIndex","subClassName","recipientArray","status","includes","action","active","handleConversationDeletePress","NewContactModal","idRef","nameRef","trim","Label","CustomAlert","heading","Alert","zIndex","Heading","NewConversationModal","selectedContactIds","setSelectedContactIds","showAlert","setShowAlert","setTimeout","controlId","Check","label","contactId","prevId","CONVERSATION_KEY","CONTACTS_KEY","alignCenter","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","isConvrsationOpen","maxWidth","Tab","Container","onSelect","Nav","Link","eventKey","Content","Pane","Dashboard","NoConversationToAppear","Login","onIdSubmit","uuidV4","App","setId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gJAIe,SAASA,EAAgBC,EAAKC,GAC3C,IAAMC,EAHc,QAGSF,EAD4B,EAE/BG,oBAAS,WACjC,IAAMC,EAAYC,aAAaC,QAAQJ,GACvC,OAAiB,MAAbE,EAA0BG,KAAKC,MAAMJ,GACb,oBAAjBH,EACFA,IAEAA,KAR8C,mBAElDQ,EAFkD,KAE3CC,EAF2C,KAsBzD,OANAC,qBAAU,WACJF,GACFJ,aAAaO,QAAQV,EAAaK,KAAKM,UAAUJ,MAElD,CAACA,EAAOP,IAEJ,CAACO,EAAOC,EAVf,WACEL,aAAaS,WAAWZ,K,WCdtBa,EAAiBC,0BAEhB,SAASC,IACd,OAAOC,qBAAWH,GAGb,SAASI,EAAT,GAAwC,IAAbC,EAAY,EAAZA,SAAY,EACZrB,EAAgB,WAAY,IADhB,mBACrCsB,EADqC,KAC3BC,EAD2B,KAkB5C,OACE,cAACP,EAAeQ,SAAhB,CACEd,MAAO,CACLY,WACAG,cAbN,SAAuBC,EAAIC,GACrBL,EAASM,MAAK,SAACC,GAAD,OAAaA,EAAQH,KAAOA,KAC5CI,MAAM,+BAIRP,GAAY,SAACQ,GAAD,4BAAcA,GAAd,CAAoB,CAAEL,KAAIC,OAAMK,UAAU,SAQlDC,cApBN,SAAuBC,GACrBX,GAAY,SAACQ,GACX,OAAOA,EAAKI,QAAO,SAACC,EAAMC,GAAP,OAAeH,IAAUG,SAmB1CC,eAAgBf,GALpB,SAQGF,I,6BChCDkB,EAAgBtB,0BAIf,SAASuB,IACd,OAAOrB,qBAAWoB,GAGb,SAASE,EAAT,GAA2C,IAAjBf,EAAgB,EAAhBA,GAAIL,EAAY,EAAZA,SAAY,EACnBjB,qBADmB,mBACxCsC,EADwC,KAChCC,EADgC,KAEvCrB,EAAaJ,IAAbI,SAFuC,EAGTlB,mBAAS,IAHA,mBAGxCwC,EAHwC,KAG3BC,EAH2B,KAuB/C,OAlBAjC,qBAAU,WACR,IAAMkC,EAAYC,IAZL,sCAYkB,CAC7BC,MAAO,CACLtB,QAIJ,OADAiB,EAAUG,GACH,kBAAMA,EAAUG,WACtB,CAACvB,IAEJd,qBAAU,WACR,GAAc,MAAV8B,EAIJ,OAFAA,EAAOQ,GAAG,eAAgBL,GAEnB,kBAAMH,EAAOS,IAAI,mBACvB,CAAC7B,EAAUoB,IAGZ,cAACH,EAAcf,SAAf,CAAwBd,MAAO,CAAEgC,SAAQE,eAAzC,SACGvB,IC1BP,IAAM+B,EAAuBnC,0BAEtB,SAASoC,IACd,OAAOlC,qBAAWiC,GAGb,SAASE,EAAT,GAAkD,IAAjB5B,EAAgB,EAAhBA,GAAIL,EAAY,EAAZA,SAAY,EACZrB,EACxC,gBACA,IAHoD,mBAC/CuD,EAD+C,KAChCC,EADgC,KAM9Cd,EAAWF,IAAXE,OAN8C,EAQYtC,mBAAS,GARrB,mBAQ/CqD,EAR+C,KAQpBC,EARoB,KAU9CpC,EAAaJ,IAAbI,SAcR,IAAMqC,EAA2BC,uBAC/B,YAAyC,IAAtCC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAIvBR,GAAiB,SAACS,GAChB,IAAIC,GAAc,EAEZC,EAAa,CAAEH,SAAQF,OAAMC,QAE7BK,EAAmBH,EAAkBI,KAAI,SAACC,GAC9C,OAgFWC,EAhFOD,EAAaT,WAgFjBW,EAhF6BX,EAiFjDU,EAAEE,SAAWD,EAAEC,SAEnBF,EAAEG,OACFF,EAAEE,OAEKH,EAAEI,OAAM,SAACC,EAAM1C,GACpB,OAAO0C,IAASJ,EAAEtC,QAtFRgC,GAAc,EACP,2BACFI,GADL,IAEEO,SAAS,GAAD,mBAAMP,EAAaO,UAAnB,CAA6BV,OAGlCG,EAyEnB,IAAuBC,EAAGC,KAtEhB,OAAIN,EACKE,EAED,GAAN,mBACKH,GADL,CAEE,CAAEJ,aAAYgB,SAAU,CAACV,WAMnC,CAACX,IAGH5C,qBAAU,WACR,GAAc,MAAV8B,EAGJ,OADAA,EAAOQ,GAAG,kBAAmBS,GACtB,WACLjB,EAAOS,IAAI,sBAEZ,CAACT,EAAQiB,IAQZ,IAAMmB,EAAyBvB,EAAcc,KAAI,SAACC,EAAcpC,GAC9D,IAAM2B,EAAaS,EAAaT,WAAWQ,KAAI,SAACU,GAC9C,IAAMlD,EAAUP,EAAS0D,MAAK,SAACnD,GAC7B,OAAOA,EAAQH,KAAOqD,KAElBpD,EAAOE,GAAWA,EAAQF,KAChC,MAAO,CAAED,GAAIqD,EAAWpD,WAGpBkD,EAAWP,EAAaO,SAASR,KAAI,SAACY,GAC1C,IAAMpD,EAAUP,EAAS0D,MAAK,SAACnD,GAC7B,OAAOA,EAAQH,KAAOuD,EAAQjB,UAE1BkB,EAASxD,IAAOuD,EAAQjB,OAC9B,OAAO,2BACFiB,GADL,IAEEE,WAAYtD,GAAWA,EAAQF,KAC/ByD,SAAUH,EAAQjB,OAClBkB,cAGEG,EAAWnD,IAAUuB,EAC3B,OAAO,2BAAKa,GAAZ,IAA0BO,WAAUhB,aAAYwB,gBAG5C3E,EAAQ,CACZ6C,cAAeuB,EACfQ,qBAAsBR,EAAuBrB,GAC7C8B,mBA1FF,SAA4B1B,GAC1BL,GAAiB,SAACzB,GAChB,MAAM,GAAN,mBAAWA,GAAX,CAAiB,CAAE8B,aAAYgB,SAAU,UAyF3CW,mBArFF,SAA4BtD,GAC1BsB,GAAiB,SAACzB,GAChB,OAAOA,EAAKI,QAAO,SAACC,EAAMC,GAAP,OAAeH,IAAUG,SAoF9CoD,YApCF,YAAkD,IAA3B5B,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACvCrB,EAAOgD,KAAK,eAAgB,CAAE7B,aAAYC,OAAMC,SAEhDJ,EAAyB,CAAEE,aAAYC,OAAMC,OAAMC,OAAQtC,KAkC3DiE,wBAAyBjC,GAG3B,OACE,cAACN,EAAqB5B,SAAtB,CAA+Bd,MAAOA,EAAtC,SACGW,I,+BC1HQ,SAASuE,IACtB,IAAMC,EAAc7F,EAAgB,MAAM,GADX,EAEGI,oBAAS,GAFZ,mBAExB0F,EAFwB,KAEbC,EAFa,KAc/B,SAASC,IACPD,GAAa,GAGf,OACE,sBAAKE,MAAO,CAAEC,SAAU,QAASC,MAAO,GAAxC,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,KACLC,UAAU,4BACVC,QAnBN,WACER,GAAa,IAeX,SAKE,cAAC,IAAD,CAAiBO,UAAU,OAAOD,KAAM,OAE1C,eAACG,EAAA,EAAD,CAAOC,KAAMX,EAAWY,OAAQV,EAAhC,UACE,cAACQ,EAAA,EAAMG,OAAP,UACE,oBAAIL,UAAU,MAAd,uCAEF,eAACE,EAAA,EAAMI,KAAP,WACE,2FACA,sBAAKN,UAAU,6BAAf,UACE,cAACF,EAAA,EAAD,CAAQS,QAAQ,SAASP,UAAU,OAAOC,QA1BpD,WACEV,IACAG,IACAc,OAAOC,SAASC,UAuBR,kBAGA,cAACZ,EAAA,EAAD,CAAQS,QAAQ,YAAYN,QAASP,EAArC,gC,sCCpCG,SAASiB,IAAgB,IAAD,EACb7G,mBAAS,IADI,mBAC9B8G,EAD8B,KACxBC,EADwB,OAEb/G,qBAFa,mBAE9BgH,EAF8B,KAExBC,EAFwB,OAGShE,IAAtCoC,EAH6B,EAG7BA,YAAaH,EAHgB,EAGhBA,qBACfgC,EAAYC,mBAyClB,OACE,cAACC,EAAA,EAAD,CAAMC,SAxCR,SAAsBC,GAEpB,GADAA,EAAEC,iBACEP,EAAM,CACRQ,QAAQC,IAAIT,GACZ,IAAMU,EAAS,IAAIC,WACnBD,EAAOE,cAAcZ,GACrBU,EAAOG,iBAAiB,WAAW,WACjCxC,EAAY,CACV5B,WAAYyB,EAAqBzB,WAAWQ,KAAI,SAAC6D,GAAD,OAAOA,EAAExG,MACzDoC,KAAMgE,EAAOK,OACbpE,KAAMqD,EAAKrD,OAEbsD,YAGF5B,EAAY,CACV5B,WAAYyB,EAAqBzB,WAAWQ,KAAI,SAAC6D,GAAD,OAAOA,EAAExG,MACzDoC,KAAMoD,EACNnD,KAAM,SAGVoD,EAAQ,KAmBR,SACE,cAACK,EAAA,EAAKY,MAAN,CAAY9B,UAAU,MAAtB,SACE,eAAC+B,EAAA,EAAD,CAAY/B,UAAU,4BAAtB,UACE,cAAC+B,EAAA,EAAWC,QAAZ,UACE,sBAAKhC,UAAU,OAAf,UACE,cAACkB,EAAA,EAAKe,QAAN,CACEC,IAAKlB,EACLmB,SAnBd,SAAoBf,GAClB,IAAIgB,EAAYhB,EAAEiB,OAAOC,MAAM,GAC/B,GAAIF,EAAUrC,KAAO,IAInB,OAHAvE,MAAM,uCACNqF,EAAQ,SACRE,IAGFF,EAAQuB,EAAU/G,MAClB0F,EAAQqB,IAWI3E,KAAK,OACLuC,UAAU,SACVuC,OAAO,sBAET,cAAC,IAAD,CACEtC,QA7Bd,WACEe,EAAUwB,QAAQC,SA6BNC,KAAMC,IACN5C,KAAK,YAIX,cAACmB,EAAA,EAAKe,QAAN,CACEW,YAAY,2BACZC,GAAG,WACHC,UAAQ,EACR1I,MAAOwG,EACPuB,SAAU,SAACf,GAAD,OAAOP,EAAQO,EAAEiB,OAAOjI,QAClCuF,MAAO,CACLoD,OAAQ,QACRC,OAAQ,UAGZ,cAACjB,EAAA,EAAWkB,OAAZ,UACE,eAACnD,EAAA,EAAD,CACES,QAAQ,UACR9C,KAAK,SACLuC,UAAU,+DAHZ,UAKE,cAAC,IAAD,CAAiB0C,KAAMQ,IAAcnD,KAAK,OAL5C,mBC/EG,SAASoD,IACtB,IAAMC,EAAS9F,uBAAY,SAAC+F,GAC1BA,GAAQA,EAAKC,eAAe,CAAEC,QAAQ,MACrC,IAEKvE,EAAyBjC,IAAzBiC,qBAuER,OACE,sBAAKgB,UAAU,8CAAf,UACE,oBAAIA,UAAU,0DAAd,SACGhB,EAAqBzB,WACnBQ,KAAI,SAACU,GAAD,OAAgBA,EAAUpD,MAAQoD,EAAUpD,MAAS,aACzDmI,KAAK,QAEV,qBAAKxD,UAAU,4BAAf,SACE,qBAAKA,UAAU,gEAAf,SACGhB,EAAqBT,SAASR,KA9EvC,SAAwBY,EAAS/C,GAC/B,IAAM6H,EAAczE,EAAqBT,SAASJ,OAAS,IAAMvC,EAEjE,MAAqB,SAAjB+C,EAAQlB,KAER,sBACEyE,IAAKuB,EAAcL,EAAS,KAE5BpD,UAAS,6BACPrB,EAAQC,OACJ,iCACA,qBANR,UASE,qBACEoB,UAAS,6CACPrB,EAAQC,OAAS,wBAA0B,mBAF/C,SAKGD,EAAQnB,OAEX,cAACkG,EAAD,MAdK9H,GAmBP,sBAEEoE,UAAS,UACPrB,EAAQC,OAAS,iBAAmB,qBAHxC,UAME,qBACEoB,UAAS,UACPrB,EAAQC,OAAS,aAAe,kBADzB,gBADX,SAKE,qBACEe,MAAO,CAAEgE,MAAO,IAAKZ,OAAQ,QAC7Ba,IAAKjF,EAAQnB,KACbqG,IAAG,kBACDlF,EAAQE,WACJF,EAAQE,WACRF,EAAQC,OACR,MACA,uBAIV,cAAC8E,EAAD,MAtBK9H,GA2BX,SAAS8H,IACP,OACE,qBACE1D,UAAS,gCACPrB,EAAQE,YAAc,kBADf,iBAEAF,EAAQC,OAAS,iBAAmB,IAH/C,SAKGD,EAAQC,OACL,MACCD,EAAQE,YAAcF,EAAQE,YAAeF,EAAQG,mBAkB9D,cAAC6B,EAAD,O,mECzFS,SAASmD,EAAT,GAA+D,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,cAAetE,EAAc,EAAdA,WAC7D,OACE,qCACE,cAACQ,EAAA,EAAMG,OAAP,CAAc4D,aAAW,EAAzB,SACE,cAAC/D,EAAA,EAAMgE,MAAP,gCAEF,cAAChE,EAAA,EAAMI,KAAP,UACE,4BAAIyD,MAGN,eAAC7D,EAAA,EAAMiE,OAAP,WACE,cAACrE,EAAA,EAAD,CAAQS,QAAQ,SAASN,QAAS+D,EAAlC,oBAGA,cAAClE,EAAA,EAAD,CAAQG,QAASP,EAAYa,QAAQ,YAArC,0BCXO,SAAS6D,IAAY,IAAD,EACGxJ,IAA5BI,EADyB,EACzBA,SAAUW,EADe,EACfA,cADe,EAEC7B,oBAAS,GAFV,mBAE1B0F,EAF0B,KAEf6E,EAFe,OAGqBvK,qBAHrB,mBAG1BwK,EAH0B,KAGLC,EAHK,OAIuBzK,qBAJvB,mBAI1B0K,EAJ0B,KAIJC,EAJI,KAMjC,SAAS/E,IACP2E,GAAa,GAQf,OACE,qCACE,cAACnE,EAAA,EAAD,CAAOC,KAAMX,EAAWY,OAAQV,EAAhC,SACE,cAACoE,EAAD,CACEC,SAAQ,yBAAoBO,EAApB,sBACR5E,WAAY,kBAAM2E,GAAa,IAC/BL,cAXR,WACErI,EAAc6I,GACd9E,SAYE,cAACgF,EAAA,EAAD,CAAWnE,QAAQ,QAAnB,SACGvF,EAAS+C,KAAI,SAACxC,EAASK,GAAV,OACZ,eAAC8I,EAAA,EAAUC,KAAX,WACE,sBAAK3E,UAAU,oDAAf,UACE,sBAAKA,UAAU,0CAAf,UACE,cAAC,IAAD,IACA,mBAAGA,UAAU,qEAAb,SACGzE,EAAQF,UAGb,cAAC,IAAD,CACE2E,UAAU,cACVC,QAAS,WACPsE,EAAuBhJ,EAAQF,MAC/BoJ,EAAwB7I,GACxByI,GAAa,SAInB,mBACErE,UAAU,sDACVL,MAAO,CAAEiF,SAAU,IAFrB,SAIGrJ,EAAQH,OArBQG,EAAQH,Y,aCzBxB,SAASyJ,IAAiB,IAAD,EACJ/K,oBAAS,GADL,mBAC/B0F,EAD+B,KACpB6E,EADoB,OAGkBvK,qBAHlB,mBAG/BgL,EAH+B,KAGTC,EAHS,OAK4BjL,qBAL5B,mBAK/BkL,EAL+B,KAKJC,EALI,OAWlClI,IAHFE,EARoC,EAQpCA,cACAoC,EAToC,EASpCA,wBACAH,EAVoC,EAUpCA,mBAGM5C,EAAgBJ,IAAhBI,YAER,SAASoD,IACP2E,GAAa,GAef,OACE,qCACE,cAACnE,EAAA,EAAD,CAAOC,KAAMX,EAAWY,OAAQV,EAAhC,SACE,cAACoE,EAAD,CACEC,SAAQ,kCAA6Be,EAA7B,sBACRpF,WAAY,kBAAM2E,GAAa,IAC/BL,cAZR,WACE9E,EAAmB8F,GACnBtF,IACAL,EAAwB,QAYtB,cAACqF,EAAA,EAAD,CAAWnE,QAAQ,QAAnB,SACGtD,EAAcc,KAAI,SAACC,EAAcpC,GAChC,IAAIsJ,EAAe,kBACbC,EAAiBnH,EAAaT,WACjCQ,KAAI,SAAC6D,GACJ,IAAIwD,EAAS,GAKb,OAJI9I,EAAY+I,SAASzD,EAAExG,MACzBgK,EAAS,aAGG,MAAVxD,EAAEvG,KACGuG,EAAEvG,KAAO+J,GAEhBF,EAAe,QACRtD,EAAExG,GAAKgK,MAGjB5B,KAAK,MACR,OACE,eAACkB,EAAA,EAAUC,KAAX,CACE3E,UACE,qDACAkF,EAGFI,QAAM,EACN/E,QAAQ,OACRN,QAAS,WACPZ,EAAwBzD,IAE1B2J,OAAQvH,EAAae,SAXvB,UAaE,sBAAKiB,UAAU,0CAAf,UACE,cAAC,IAAD,CAAQA,UAAU,SAClB,qBAAKA,UAAU,2BAAf,SAA2CmF,OAE7C,cAAC,IAAD,CACEnF,UAAU,cACVC,QAAS,kBA3DvB,SAAuCrE,EAAO6C,GAC5CsG,EAAwBtG,GACxBwG,EAA6BrJ,GAC7ByI,GAAa,GAyDCmB,CAA8B5J,EAAOuJ,QAfpCvJ,WCnEJ,SAAS6J,EAAT,GAA0C,IAAf/F,EAAc,EAAdA,WAClCgG,EAAQzE,mBACR0E,EAAU1E,mBACR9F,EAAkBP,IAAlBO,cAUR,OACE,qCACE,cAAC+E,EAAA,EAAMG,OAAP,6BACA,cAACH,EAAA,EAAMI,KAAP,UACE,eAACY,EAAA,EAAD,CAAMC,SAZZ,SAAsBC,GACpBA,EAAEC,iBACF,IAAIjG,EAAKsK,EAAMlD,QAAQpI,MAAMwL,OAE7BzK,EAAcC,EAAIuK,EAAQnD,QAAQpI,OAElCsF,KAMI,UACE,eAACwB,EAAA,EAAKY,MAAN,WACE,cAACZ,EAAA,EAAK2E,MAAN,iBACA,cAAC3E,EAAA,EAAKe,QAAN,CAAcxE,KAAK,OAAOyE,IAAKwD,EAAO5C,UAAQ,OAEhD,eAAC5B,EAAA,EAAKY,MAAN,WACE,cAACZ,EAAA,EAAK2E,MAAN,mBACA,cAAC3E,EAAA,EAAKe,QAAN,CAAcxE,KAAK,OAAOyE,IAAKyD,EAAS7C,UAAQ,OAElD,cAAChD,EAAA,EAAD,CAAQrC,KAAK,SAAb,4B,aC3BK,SAASqI,EAAT,GAAsD,IAA/BC,EAA8B,EAA9BA,QAASvI,EAAqB,EAArBA,KAAM2C,EAAe,EAAfA,KAAMR,EAAS,EAATA,MACzD,OAAIQ,EAEA,eAAC6F,EAAA,EAAD,CACEhG,UAAU,8CACVL,MAAK,aAAIsG,OAAQ,IAAOtG,GACxBY,QAAQ,SAHV,UAKE,cAACyF,EAAA,EAAME,QAAP,UAAgBH,IAChB,mBAAG/F,UAAU,MAAb,SAAoBxC,OAInB,wBCVM,SAAS2I,EAAT,GAA+C,IAAfzG,EAAc,EAAdA,WAAc,EACP5F,mBAAS,IADF,mBACpDsM,EADoD,KAChCC,EADgC,KAEnDrL,EAAaJ,IAAbI,SACAiE,EAAuBlC,IAAvBkC,mBAHmD,EAIzBnF,oBAAS,GAJgB,mBAIpDwM,EAJoD,KAIzCC,EAJyC,KAiC3D,OACE,qCACE,cAACT,EAAD,CACEC,QAAQ,QACRvI,KAAK,wBACL2C,KAAMmG,IAER,cAACpG,EAAA,EAAMG,OAAP,UACE,uDAEF,cAACH,EAAA,EAAMI,KAAP,UACGtF,EAASmD,OAAS,EACjB,mBAAG6B,UAAU,2CAAb,6DAIA,eAACkB,EAAA,EAAD,CAAMC,SAtCd,SAAsBC,GACpBA,EAAEC,iBACE+E,EAAmBjI,QACrBc,EAAmBmH,GACnB1G,MARF6G,GAAa,GACbC,YAAW,kBAAMD,GAAa,KAAQ,OAyChC,UACGvL,EAAS+C,KAAI,SAACxC,GAAD,OACZ,cAAC2F,EAAA,EAAKY,MAAN,CAAY2E,UAAWlL,EAAQH,GAA/B,SACE,cAAC8F,EAAA,EAAKwF,MAAN,CACEjJ,KAAK,WACLrD,MAAOgM,EAAmBf,SAAS9J,EAAQH,IAC3CuL,MAAOpL,EAAQF,KACf8G,SAAU,kBAnCIyE,EAmCuBrL,EAAQH,QAlC3DiL,GAAsB,SAAC5K,GACrB,OAAIA,EAAK4J,SAASuB,GACTnL,EAAKI,QAAO,SAACgL,GAClB,OAAOD,IAAcC,KAGjB,GAAN,mBAAWpL,GAAX,CAAiBmL,OAPvB,IAA8BA,MA8BsBrL,EAAQH,OASlD,cAAC0E,EAAA,EAAD,CAAQrC,KAAK,SAAb,4BC1DZ,IAAMqJ,EAAmB,gBACnBC,EAAe,WAEfC,EAAc,uDAEL,SAASC,EAAT,GAA0B,IAAP7L,EAAM,EAANA,GAAM,EACJtB,mBAASgN,GADL,mBAC/BI,EAD+B,KACpBC,EADoB,OAEJrN,oBAAS,GAFL,mBAE/BsN,EAF+B,KAEpBC,EAFoB,KAItC,SAAS3H,IACP2H,GAAa,GAGf,IAAMC,EAAoBJ,IAAcJ,EAExC,OACE,sBACEnH,MAAO,CAAE4H,SAAU,QAAS5D,MAAO,QACnC3D,UAAU,mCAFZ,UAIE,eAACwH,EAAA,EAAIC,UAAL,CAAeP,UAAWA,EAAWQ,SAAUP,EAA/C,UACE,eAACQ,EAAA,EAAD,CAAKpH,QAAQ,OAAOP,UAAU,yBAA9B,UACE,cAAC2H,EAAA,EAAIhD,KAAL,UACE,cAACgD,EAAA,EAAIC,KAAL,CAAUC,SAAUf,EAApB,6BAEF,cAACa,EAAA,EAAIhD,KAAL,UACE,cAACgD,EAAA,EAAIC,KAAL,CAAUC,SAAUd,EAApB,2BAGJ,eAACS,EAAA,EAAIM,QAAL,CAAa9H,UAAU,4BAAvB,UACE,cAACwH,EAAA,EAAIO,KAAL,CAAUF,SAAUf,EAApB,SACE,cAACjC,EAAD,MAEF,cAAC2C,EAAA,EAAIO,KAAL,CAAUF,SAAUd,EAApB,SACE,cAAC3C,EAAD,SAGJ,sBAAKpE,UAAU,uBAAf,uBACY,sBAAMA,UAAU,aAAhB,SAA8B5E,OAE1C,cAAC0E,EAAA,EAAD,CACES,QAAQ,OACRR,KAAK,KACLC,UAAU,MACVC,QAAS,kBAAMoH,GAAa,IAJ9B,SAMGC,EACC,sBAAKtH,UAAWgH,EAAhB,8BACmB,cAAC,IAAD,OAGnB,sBAAKhH,UAAWgH,EAAhB,6BACkB,cAAC,IAAD,YAKxB,cAAC9G,EAAA,EAAD,CAAOC,KAAMiH,EAAWhH,OAAQV,EAAhC,SACG4H,EACC,cAACnB,EAAD,CAAsBzG,WAAYA,IAElC,cAAC+F,EAAD,CAAiB/F,WAAYA,SC/DxB,SAASsI,EAAT,GAA4B,IAAP5M,EAAM,EAANA,GAC1B4D,EAAyBjC,IAAzBiC,qBACR,OACE,sBAAKgB,UAAU,SAASL,MAAO,CAAEoD,OAAQ,SAAzC,UACE,cAACkE,EAAD,CAAS7L,GAAIA,IACZ4D,EAAuB,cAACmE,EAAD,IAAuB,cAAC8E,EAAD,IAC/C,cAAC3I,EAAD,OAKN,SAAS2I,IACP,OACE,qBAAKjI,UAAU,+DAAf,SACE,mBAAGA,UAAU,aAAb,gD,uBChBS,SAASkI,GAAT,GAAgC,IAAfC,EAAc,EAAdA,WACxBzC,EAAQzE,mBAUd,OACE,cAACwG,EAAA,EAAD,CACEzH,UAAU,4BACVL,MAAO,CAAEoD,OAAQ,SAFnB,SAIE,eAAC7B,EAAA,EAAD,CAAMlB,UAAU,QAAQmB,SAb5B,SAAsBC,GACpBA,EAAEC,iBACF8G,EAAWzC,EAAMlD,QAAQpI,QAWvB,UACE,eAAC8G,EAAA,EAAKY,MAAN,WACE,cAACZ,EAAA,EAAK2E,MAAN,4BACA,cAAC3E,EAAA,EAAKe,QAAN,CAAcxE,KAAK,OAAOyE,IAAKwD,EAAO5C,UAAQ,OAEhD,cAAChD,EAAA,EAAD,CAAQrC,KAAK,SAASuC,UAAU,OAAhC,mBAGA,cAACF,EAAA,EAAD,CAAQS,QAAQ,YAAYN,QAhBlC,WACEkI,EAAWC,iBAeP,kCCLOC,OAff,WAAgB,IAAD,EACO3O,EAAgB,MADvB,mBACN0B,EADM,KACFkN,EADE,KAYb,OAAOlN,EATL,cAACN,EAAD,CAAiBM,GAAIA,EAArB,SACE,cAACe,EAAD,CAAgBf,GAAIA,EAApB,SACE,cAAC4B,EAAD,CAAuB5B,GAAIA,EAA3B,SACE,cAAC4M,EAAD,CAAW5M,GAAIA,UAMC,cAAC8M,GAAD,CAAOC,WAAYG,KCR9BC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,SAKjDZ,O","file":"static/js/main.84c6f00f.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport const PREFIX = \"ssup-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  function deleteValue() {\r\n    localStorage.removeItem(prefixedKey);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n    }\r\n  }, [value, prefixedKey]);\r\n\r\n  return [value, setValue, deleteValue];\r\n}\r\n","import React, { createContext, useContext } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nconst ContactContext = createContext();\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactContext);\r\n}\r\n\r\nexport function ContactProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\r\n\r\n  function removeContact(index) {\r\n    setContacts((prev) => {\r\n      return prev.filter((item, idx) => index !== idx);\r\n    });\r\n  }\r\n\r\n  function createContact(id, name) {\r\n    if (contacts.some((contact) => contact.id === id)) {\r\n      alert(\"Oops! entry already exists.\");\r\n      return;\r\n    }\r\n\r\n    setContacts((prev) => [...prev, { id, name, isOnline: false }]);\r\n  }\r\n\r\n  return (\r\n    <ContactContext.Provider\r\n      value={{\r\n        contacts,\r\n        createContact,\r\n        removeContact,\r\n        updateContacts: setContacts,\r\n      }}\r\n    >\r\n      {children}\r\n    </ContactContext.Provider>\r\n  );\r\n}\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst ENDPOINT = \"https://ssup-backend.herokuapp.com/\";\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState();\r\n  const { contacts } = useContacts();\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(ENDPOINT, {\r\n      query: {\r\n        id,\r\n      },\r\n    });\r\n    setSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"online-users\", setOnlineUsers);\r\n\r\n    return () => socket.off(\"online-users\");\r\n  }, [contacts, socket]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={{ socket, onlineUsers }}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useSocket } from \"./SocketProvider\";\r\n\r\nconst ConversationsContext = createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage(\r\n    \"conversations\",\r\n    []\r\n  );\r\n\r\n  const { socket } = useSocket();\r\n\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n\r\n  const { contacts } = useContacts();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prev) => {\r\n      return [...prev, { recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  function removeConversation(index) {\r\n    setConversations((prev) => {\r\n      return prev.filter((item, idx) => index !== idx);\r\n    });\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, body, type, sender }) => {\r\n      setConversationsAfterTypeVerify();\r\n\r\n      function setConversationsAfterTypeVerify() {\r\n        setConversations((prevConversations) => {\r\n          let madeChanges = false;\r\n\r\n          const newMessage = { sender, body, type };\r\n\r\n          const newConversations = prevConversations.map((conversation) => {\r\n            if (arrayEquality(conversation.recipients, recipients)) {\r\n              madeChanges = true;\r\n              return {\r\n                ...conversation,\r\n                messages: [...conversation.messages, newMessage],\r\n              };\r\n            }\r\n            return conversation;\r\n          });\r\n\r\n          if (madeChanges) {\r\n            return newConversations;\r\n          } else {\r\n            return [\r\n              ...prevConversations,\r\n              { recipients, messages: [newMessage] },\r\n            ];\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", addMessageToConversation);\r\n    return () => {\r\n      socket.off(\"receive-message\");\r\n    };\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  function sendMessage({ recipients, body, type }) {\r\n    socket.emit(\"send-message\", { recipients, body, type });\r\n\r\n    addMessageToConversation({ recipients, body, type, sender: id });\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient;\r\n      });\r\n      const name = contact && contact.name;\r\n      return { id: recipient, name };\r\n    });\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const fromMe = id === message.sender;\r\n      return {\r\n        ...message,\r\n        senderName: contact && contact.name,\r\n        senderID: message.sender,\r\n        fromMe,\r\n      };\r\n    });\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    createConversation,\r\n    removeConversation,\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((elem, index) => {\r\n    return elem === b[index];\r\n  });\r\n}\r\n","import { Button, Modal } from \"react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { BoxArrowInRight } from \"react-bootstrap-icons\";\r\n\r\nexport default function Logout() {\r\n  const deleteValue = useLocalStorage(\"id\")[2];\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  function openModal() {\r\n    setShowModal(true);\r\n  }\r\n\r\n  function logout() {\r\n    deleteValue();\r\n    closeModal();\r\n    window.location.reload();\r\n  }\r\n\r\n  function closeModal() {\r\n    setShowModal(false);\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: \"fixed\", right: 0 }}>\r\n      <Button\r\n        size=\"sm\"\r\n        className=\"d-flex align-items-center\"\r\n        onClick={openModal}\r\n      >\r\n        <BoxArrowInRight className=\"mr-2\" size={30} />\r\n      </Button>\r\n      <Modal show={showModal} onHide={closeModal}>\r\n        <Modal.Header>\r\n          <h5 className=\"m-0\">You will be logged out!</h5>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Please save your ID before logging out or you may lose it.</p>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button variant=\"danger\" className=\"mx-2\" onClick={logout}>\r\n              Okay\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={closeModal}>\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFileImage, faPaperPlane } from \"@fortawesome/free-solid-svg-icons\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function MessageInput() {\r\n  const [text, setText] = useState(\"\");\r\n  const [file, setFile] = useState();\r\n  const { sendMessage, selectedConversation } = useConversations();\r\n  const fileInput = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (file) {\r\n      console.log(file);\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.addEventListener(\"loadend\", () => {\r\n        sendMessage({\r\n          recipients: selectedConversation.recipients.map((r) => r.id),\r\n          body: reader.result,\r\n          type: file.type,\r\n        });\r\n        setFile();\r\n      });\r\n    } else {\r\n      sendMessage({\r\n        recipients: selectedConversation.recipients.map((r) => r.id),\r\n        body: text,\r\n        type: \"text\",\r\n      });\r\n    }\r\n    setText(\"\");\r\n  }\r\n\r\n  function handleFileClick() {\r\n    fileInput.current.click();\r\n  }\r\n\r\n  function selectFile(e) {\r\n    let inputFile = e.target.files[0];\r\n    if (inputFile.size > 200000) {\r\n      alert(\"maximum image size should be 200 kB\");\r\n      setText(\"\");\r\n      setFile();\r\n      return;\r\n    }\r\n    setText(inputFile.name);\r\n    setFile(inputFile);\r\n  }\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group className=\"m-1\">\r\n        <InputGroup className=\"d-flex align-items-center\">\r\n          <InputGroup.Prepend>\r\n            <div className=\"mx-2\">\r\n              <Form.Control\r\n                ref={fileInput}\r\n                onChange={selectFile}\r\n                type=\"file\"\r\n                className=\"d-none\"\r\n                accept=\".png, .jpg, .jpeg\"\r\n              />\r\n              <FontAwesomeIcon\r\n                onClick={handleFileClick}\r\n                icon={faFileImage}\r\n                size=\"2x\"\r\n              />\r\n            </div>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            placeholder=\"type your message here..\"\r\n            as=\"textarea\"\r\n            required\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            style={{\r\n              height: \"100px\",\r\n              resize: \"none\",\r\n            }}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button\r\n              variant=\"success\"\r\n              type=\"submit\"\r\n              className=\"d-flex flex-column align-items-center justify-content-center\"\r\n            >\r\n              <FontAwesomeIcon icon={faPaperPlane} size=\"2x\" />\r\n              Send\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport MessageInput from \"./MessageInput\";\r\n\r\nexport default function OpenConversation() {\r\n  const setRef = useCallback((node) => {\r\n    node && node.scrollIntoView({ smooth: true });\r\n  }, []);\r\n\r\n  const { selectedConversation } = useConversations();\r\n\r\n  function renderMessages(message, index) {\r\n    const lastMessage = selectedConversation.messages.length - 1 === index;\r\n\r\n    if (message.type === \"text\") {\r\n      return (\r\n        <div\r\n          ref={lastMessage ? setRef : null}\r\n          key={index}\r\n          className={`d-flex flex-column ${\r\n            message.fromMe\r\n              ? \"align-self-end align-items-end\"\r\n              : \"align-items-start\"\r\n          }`}\r\n        >\r\n          <div\r\n            className={`rounded px-2 py-1 font-weight-bold ${\r\n              message.fromMe ? \"bg-primary text-white\" : \"bg-light border\"\r\n            }`}\r\n          >\r\n            {message.body}\r\n          </div>\r\n          <SentFrom />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          key={index}\r\n          className={`${\r\n            message.fromMe ? \"align-self-end\" : \"align-self-start \"\r\n          }`}\r\n        >\r\n          <div\r\n            className={`${\r\n              message.fromMe ? \"bg-primary\" : \"bg-light border\"\r\n            } p-1 rounded`}\r\n          >\r\n            <img\r\n              style={{ width: 250, height: \"auto\" }}\r\n              src={message.body}\r\n              alt={`sent by ${\r\n                message.senderName\r\n                  ? message.senderName\r\n                  : message.fromMe\r\n                  ? \"you\"\r\n                  : \"unknown contact\"\r\n              }`}\r\n            />\r\n          </div>\r\n          <SentFrom />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    function SentFrom() {\r\n      return (\r\n        <div\r\n          className={`mb-2 text-muted small ${\r\n            message.senderName && \"text-capitalize\"\r\n          } px-1 ${message.fromMe ? \"align-self-end\" : \"\"}`}\r\n        >\r\n          {message.fromMe\r\n            ? \"You\"\r\n            : (message.senderName && message.senderName) || message.senderID}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex  flex-column flex-grow-1 border-left\">\r\n      <h5 className=\"text-white pl-2 bg-primary text-capitalize py-2 rounded\">\r\n        {selectedConversation.recipients\r\n          .map((recipient) => (recipient.name && recipient.name) || \"Unknown\")\r\n          .join(\", \")}\r\n      </h5>\r\n      <div className=\"flex-grow-1 overflow-auto\">\r\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n          {selectedConversation.messages.map(renderMessages)}\r\n        </div>\r\n      </div>\r\n      <MessageInput />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\nexport default function DeleteModal({ dialogue, onPressDelete, closeModal }) {\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Confirm Delete?</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>{dialogue}</p>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Button variant=\"danger\" onClick={onPressDelete}>\r\n          Delete\r\n        </Button>\r\n        <Button onClick={closeModal} variant=\"secondary\">\r\n          Cancel\r\n        </Button>\r\n      </Modal.Footer>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ListGroup, Modal } from \"react-bootstrap\";\r\nimport { PersonCircle, TrashFill } from \"react-bootstrap-icons\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport DeleteModal from \"./DeleteModal\";\r\n\r\nexport default function Contacts() {\r\n  const { contacts, removeContact } = useContacts();\r\n  const [showModal, setModalShow] = useState(false);\r\n  const [deletingContactName, setDeletingContactName] = useState();\r\n  const [deletingContactIndex, setDeletingContactIndex] = useState();\r\n\r\n  function closeModal() {\r\n    setModalShow(false);\r\n  }\r\n\r\n  function handleDeleteConfirm() {\r\n    removeContact(deletingContactIndex);\r\n    closeModal();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={showModal} onHide={closeModal}>\r\n        <DeleteModal\r\n          dialogue={`Contact entry \"${deletingContactName}\" will be removed!`}\r\n          closeModal={() => setModalShow(false)}\r\n          onPressDelete={handleDeleteConfirm}\r\n        />\r\n      </Modal>\r\n      <ListGroup variant=\"flush\">\r\n        {contacts.map((contact, index) => (\r\n          <ListGroup.Item key={contact.id}>\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n              <div className=\"d-flex align-items-center col-md-11 p-0\">\r\n                <PersonCircle />\r\n                <p className=\"m-0 p-0 ml-2 text-capitalize font-weight-bold col-md-10 text-break\">\r\n                  {contact.name}\r\n                </p>\r\n              </div>\r\n              <TrashFill\r\n                className=\"text-danger\"\r\n                onClick={() => {\r\n                  setDeletingContactName(contact.name);\r\n                  setDeletingContactIndex(index);\r\n                  setModalShow(true);\r\n                }}\r\n              />\r\n            </div>\r\n            <p\r\n              className=\"text-muted m-0 mt-1 font-weight-lighter text-center\"\r\n              style={{ fontSize: 14 }}\r\n            >\r\n              {contact.id}\r\n            </p>\r\n          </ListGroup.Item>\r\n        ))}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { ListGroup, Modal } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport { People, TrashFill } from \"react-bootstrap-icons\";\r\nimport DeleteModal from \"./DeleteModal\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\n\r\nexport default function Conversations() {\r\n  const [showModal, setModalShow] = useState(false);\r\n\r\n  const [deletingConversation, setDeletingConversation] = useState();\r\n\r\n  const [deletingConversationIndex, setDeletingConversationIndex] = useState();\r\n\r\n  const {\r\n    conversations,\r\n    selectConversationIndex,\r\n    removeConversation,\r\n  } = useConversations();\r\n\r\n  const { onlineUsers } = useSocket();\r\n\r\n  function closeModal() {\r\n    setModalShow(false);\r\n  }\r\n\r\n  function handleConversationDeletePress(index, recipient) {\r\n    setDeletingConversation(recipient);\r\n    setDeletingConversationIndex(index);\r\n    setModalShow(true);\r\n  }\r\n\r\n  function handleDeleteConfirm() {\r\n    removeConversation(deletingConversationIndex);\r\n    closeModal();\r\n    selectConversationIndex(0);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={showModal} onHide={closeModal}>\r\n        <DeleteModal\r\n          dialogue={`Your conversation with \"${deletingConversation}\" will be deleted!`}\r\n          closeModal={() => setModalShow(false)}\r\n          onPressDelete={handleDeleteConfirm}\r\n        />\r\n      </Modal>\r\n      <ListGroup variant=\"flush\">\r\n        {conversations.map((conversation, index) => {\r\n          let subClassName = \"text-capitalize\";\r\n          const recipientArray = conversation.recipients\r\n            .map((r) => {\r\n              let status = \"\";\r\n              if (onlineUsers.includes(r.id)) {\r\n                status = \" (online)\";\r\n              }\r\n\r\n              if (r.name != null) {\r\n                return r.name + status;\r\n              } else {\r\n                subClassName = \"small\";\r\n                return r.id + status;\r\n              }\r\n            })\r\n            .join(\", \");\r\n          return (\r\n            <ListGroup.Item\r\n              className={\r\n                \"d-flex justify-content-between align-items-center \" +\r\n                subClassName\r\n              }\r\n              key={index}\r\n              action\r\n              variant=\"dark\"\r\n              onClick={() => {\r\n                selectConversationIndex(index);\r\n              }}\r\n              active={conversation.selected}\r\n            >\r\n              <div className=\"col-md-11 d-flex align-items-center p-0\">\r\n                <People className=\"mr-2\" />\r\n                <div className=\"col-md-10 p-0 text-break\">{recipientArray}</div>\r\n              </div>\r\n              <TrashFill\r\n                className=\"text-danger\"\r\n                onClick={() =>\r\n                  handleConversationDeletePress(index, recipientArray)\r\n                }\r\n              />\r\n            </ListGroup.Item>\r\n          );\r\n        })}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n  const idRef = useRef();\r\n  const nameRef = useRef();\r\n  const { createContact } = useContacts();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let id = idRef.current.value.trim();\r\n\r\n    createContact(id, nameRef.current.value);\r\n\r\n    closeModal();\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header>Create Contact</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control type=\"text\" ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameRef} required />\r\n          </Form.Group>\r\n          <Button type=\"submit\">Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nexport default function CustomAlert({ heading, body, show, style }) {\r\n  if (show) {\r\n    return (\r\n      <Alert\r\n        className=\"position-absolute w-100 text-center rounded\"\r\n        style={{ zIndex: 99, ...style }}\r\n        variant=\"danger\"\r\n      >\r\n        <Alert.Heading>{heading}</Alert.Heading>\r\n        <p className=\"m-0\">{body}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n  return <div />;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport CustomAlert from \"./CustomAlert\";\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\r\n  const { contacts } = useContacts();\r\n  const { createConversation } = useConversations();\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  function PopAlert() {\r\n    setShowAlert(true);\r\n    setTimeout(() => setShowAlert(false), 500);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (selectedContactIds.length) {\r\n      createConversation(selectedContactIds);\r\n      closeModal();\r\n    } else {\r\n      PopAlert();\r\n    }\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds((prev) => {\r\n      if (prev.includes(contactId)) {\r\n        return prev.filter((prevId) => {\r\n          return contactId !== prevId;\r\n        });\r\n      } else {\r\n        return [...prev, contactId];\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CustomAlert\r\n        heading=\"Oops!\"\r\n        body=\"No contacts selected!\"\r\n        show={showAlert}\r\n      />\r\n      <Modal.Header>\r\n        <h4>Create Conversation</h4>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {contacts.length < 1 ? (\r\n          <p className=\"text-center text-danger font-weight-bold\">\r\n            \"Add contact before creating new conversation!\"\r\n          </p>\r\n        ) : (\r\n          <Form onSubmit={handleSubmit}>\r\n            {contacts.map((contact) => (\r\n              <Form.Group controlId={contact.id} key={contact.id}>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  value={selectedContactIds.includes(contact.id)}\r\n                  label={contact.name}\r\n                  onChange={() => handleCheckboxChange(contact.id)}\r\n                />\r\n              </Form.Group>\r\n            ))}\r\n            <Button type=\"submit\">Create</Button>\r\n          </Form>\r\n        )}\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal, Nav, Tab } from \"react-bootstrap\";\r\nimport { ChatFill, PersonPlusFill } from \"react-bootstrap-icons\";\r\nimport Contacts from \"./Contacts\";\r\nimport Conversations from \"./Conversations\";\r\nimport NewContactModal from \"./NewContactModal\";\r\nimport NewConversationModal from \"./NewConversationModal\";\r\n\r\nconst CONVERSATION_KEY = \"conversations\";\r\nconst CONTACTS_KEY = \"contacts\";\r\n\r\nconst alignCenter = \"d-flex align-items-center justify-content-around m-0\";\r\n\r\nexport default function Sidebar({ id }) {\r\n  const [activeKey, setActiveKey] = useState(CONVERSATION_KEY);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  function closeModal() {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  const isConvrsationOpen = activeKey === CONVERSATION_KEY;\r\n\r\n  return (\r\n    <div\r\n      style={{ maxWidth: \"290px\", width: \"50vw\" }}\r\n      className=\"d-flex flex-column  border-right\"\r\n    >\r\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n        <Nav variant=\"tabs\" className=\"justify-content-center\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONVERSATION_KEY}>Conversations</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        <Tab.Content className=\"overflow-auto flex-grow-1\">\r\n          <Tab.Pane eventKey={CONVERSATION_KEY}>\r\n            <Conversations />\r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey={CONTACTS_KEY}>\r\n            <Contacts />\r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n        <div className=\"p-2 border-top small\">\r\n          Your ID : <span className=\"text-muted\">{id}</span>\r\n        </div>\r\n        <Button\r\n          variant=\"dark\"\r\n          size=\"sm\"\r\n          className=\"m-2\"\r\n          onClick={() => setModalOpen(true)}\r\n        >\r\n          {isConvrsationOpen ? (\r\n            <div className={alignCenter}>\r\n              New Conversation <ChatFill />\r\n            </div>\r\n          ) : (\r\n            <div className={alignCenter}>\r\n              Add New Contact <PersonPlusFill />\r\n            </div>\r\n          )}\r\n        </Button>\r\n      </Tab.Container>\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        {isConvrsationOpen ? (\r\n          <NewConversationModal closeModal={closeModal} />\r\n        ) : (\r\n          <NewContactModal closeModal={closeModal} />\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\nimport Logout from \"./Logout\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations();\r\n  return (\r\n    <div className=\"d-flex\" style={{ height: \"100vh\" }}>\r\n      <Sidebar id={id} />\r\n      {selectedConversation ? <OpenConversation /> : <NoConversationToAppear />}\r\n      <Logout />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NoConversationToAppear() {\r\n  return (\r\n    <div className=\"d-flex flex-grow-1 justify-content-center align-items-center\">\r\n      <p className=\"text-muted\">Conversations will display here!</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    onIdSubmit(idRef.current.value);\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidV4());\r\n  }\r\n  return (\r\n    <Container\r\n      className=\"align-items-center d-flex\"\r\n      style={{ height: \"100vh\" }}\r\n    >\r\n      <Form className=\"w-100\" onSubmit={handleSubmit}>\r\n        <Form.Group>\r\n          <Form.Label>Enter Your ID</Form.Label>\r\n          <Form.Control type=\"text\" ref={idRef} required></Form.Control>\r\n        </Form.Group>\r\n        <Button type=\"submit\" className=\"mr-2\">\r\n          Login\r\n        </Button>\r\n        <Button variant=\"secondary\" onClick={createNewId}>\r\n          Create A New Id\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ContactProvider } from \"../contexts/ContactsProvider\";\r\nimport { ConversationsProvider } from \"../contexts/ConversationsProvider\";\r\nimport { SocketProvider } from \"../contexts/SocketProvider\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Login from \"./Login\";\r\n\r\nfunction App() {\r\n  const [id, setId] = useLocalStorage(\"id\");\r\n  const dashboard = (\r\n    <ContactProvider id={id}>\r\n      <SocketProvider id={id}>\r\n        <ConversationsProvider id={id}>\r\n          <Dashboard id={id} />\r\n        </ConversationsProvider>\r\n      </SocketProvider>\r\n    </ContactProvider>\r\n  );\r\n\r\n  return id ? dashboard : <Login onIdSubmit={setId} />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}